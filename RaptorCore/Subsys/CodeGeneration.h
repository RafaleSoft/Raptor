//////////////////////////////////////////////////////////////////////////
//	This file is generated by Raptor Builder application from 
//	Rafale Soft Inc. (c) and is necessary to compile Raptor.
//
//	Do not modify this file, your changes would be lost on next generation
//	This file defines how Raptor code is optimized according to the 
//	extensions selected in Raptor Builder
///////////////////////////////////////////////////////////////////////////


#if !defined(__CODE_GENERATION_H__)
#define __CODE_GENERATION_H__



#define RAPTOR_NAMESPACE_BEGIN namespace raptor { 
#define RAPTOR_NAMESPACE_END	} 
#define RAPTOR_NAMESPACE using namespace raptor; 
#define RAPTOR(name) raptor::name 



//	Default entry point
#if defined(_WIN32)
	#include "stdafx.h" 
	#if !defined(WINAPI)
        #define WINAPI	__stdcall
	#endif
	#ifdef EXPORT_RAPTOR_CORE
		#define RAPTOR_API __declspec(dllexport)
	#else
		#define RAPTOR_API _declspec(dllimport)
	#endif
    #define RAPTOR_FASTCALL __fastcall
    #define RAPTOR_CCALL __cdecl
    #define RAPTOR_APICALL WINAPI
    #if _MSC_VER > 1200     // 1200 is Visual C++ 6.0
        #define RAPTOR_TYPENAME typename
    #else
        #define RAPTOR_TYPENAME
    #endif
#else
	#include <stdlib.h>
	#define RAPTOR_API
    #define RAPTOR_FASTCALL
    #define RAPTOR_CCALL
    #define RAPTOR_APICALL
    #define RAPTOR_TYPENAME typename
#endif

#if defined(_WIN32) 
    #pragma warning( disable : 4786)    //  dbug info too large 
    #pragma warning( disable : 4100)  
    #pragma warning( disable : 4511)    // copy ctor not generated 
    #pragma warning( disable : 4512)    // assign operator not generated 
    #pragma warning( disable : 4663)    // C++ language changes 
	#pragma warning( disable : 4251)    // DLL interface required for STL exports 
#endif 


//	Standard Template Library Headers used for Raptor
#include <string> 
#include <vector> 
#include <map> 
#include <sstream> 
using namespace std;

RAPTOR_NAMESPACE_BEGIN
typedef struct lessString
{
	bool operator()(const string& x,const string &y) const
	{
		return (x.compare(y) < 0);
	}
} lessString;
typedef map<string,void*,lessString> MapStringToPtr;
RAPTOR_NAMESPACE_END

//
//	OpenGL extensions
//
//	Mandatory extensions 
#define GL_EXT_vertex_array                 1

// OpenGL versions
#ifndef GL_VERSION_1_0
	#define	GL_VERSION_1_0		1
#endif
#ifndef GL_VERSION_1_1
	#define	GL_VERSION_1_1		1
#endif
#ifndef GL_VERSION_1_2
	#define	GL_VERSION_1_2		1
#endif
#ifndef GL_VERSION_1_3
	#define	GL_VERSION_1_3		1
#endif
#ifndef GL_VERSION_1_4
	#define	GL_VERSION_1_4		1
#endif
#ifndef GL_VERSION_1_5
	#define	GL_VERSION_1_5		1
#endif
#ifndef GL_VERSION_2_0
	#define	GL_VERSION_2_0		1
#endif
#ifndef GL_VERSION_2_1
	#define	GL_VERSION_2_1		1
#endif
#ifndef GL_VERSION_3_0
	#define	GL_VERSION_3_0		1
#endif
#ifndef GL_VERSION_3_1
	#define	GL_VERSION_3_1		1
#endif
#ifndef GL_VERSION_3_2
	#define	GL_VERSION_3_2		1
#endif
#ifndef GL_VERSION_3_3
	#define	GL_VERSION_3_3		1
#endif
#ifndef GL_VERSION_4_0
	#define	GL_VERSION_4_0		1
#endif
#ifndef GL_VERSION_4_1
	#define	GL_VERSION_4_1		1
#endif
#ifndef GL_VERSION_4_2
	#define	GL_VERSION_4_2		1
#endif
#ifndef GL_VERSION_4_3
	#define	GL_VERSION_4_3		1
#endif
#ifndef GL_VERSION_4_4
	#define	GL_VERSION_4_4		1
#endif

#define GL_ARB_multitexture				1
#define GL_ARB_texture_compression				1
#define GL_ARB_texture_mirrored_repeat				1
#define GL_ARB_texture_env_combine				1
#define GL_ARB_transpose_matrix				1
#define GL_ARB_imaging				1
#define GL_ARB_multisample				1
#define GL_ARB_texture_env_dot3				1
#define GL_ARB_texture_cube_map				1
#define GL_ARB_vertex_buffer_object				1
#define GL_ARB_fragment_program				1
#define GL_ARB_fragment_program_shadow				1
#define GL_ARB_occlusion_query				1
#define GL_ARB_point_sprite				1
#define GL_ARB_point_parameters				1
#define GL_ARB_shadow				1
#define GL_ARB_depth_texture				1
#define GL_ARB_vertex_program				1
#define GL_ARB_texture_non_power_of_two				1
#define GL_ARB_color_buffer_float				1
#define GL_ARB_texture_float				1
#define GL_ARB_texture_border_clamp				1
#define GL_ARB_pixel_buffer_object				1
#define GL_ARB_texture_rectangle				1
#define GL_ARB_shading_language_100				1
#define GL_ARB_shader_objects				1
#define GL_ARB_vertex_shader				1
#define GL_ARB_fragment_shader				1
#define GL_ARB_draw_buffers				1
#define GL_ARB_half_float_pixel				1
#define GL_ARB_window_pos				1
#define GL_ARB_vertex_array_object				1
#define GL_ARB_texture_compression_rgtc				1
#define GL_ARB_texture_compression_bptc				1
#define GL_ARB_texture_rg				1
#define GL_ARB_fragment_coord_conventions				1
#define GL_ARB_geometry_shader4				1
#define GL_EXT_texture_compression_latc				1
#define GL_EXT_abgr				1
#define GL_EXT_bgra				1
#define GL_EXT_compiled_vertex_array				1
#define GL_EXT_packed_pixels				1
#define GL_EXT_point_parameters				1
#define GL_EXT_stencil_wrap				1
#define GL_EXT_stencil_two_side				1
#define GL_EXT_texture_compression_s3tc				1
#define GL_EXT_texture_env_add				1
#define GL_EXT_secondary_color				1
#define GL_EXT_separate_specular_color				1
#define GL_EXT_texture_filter_anisotropic				1
#define GL_EXT_fog_coord				1
#define GL_EXT_texture3D				1
#define GL_EXT_texture_edge_clamp				1
#define GL_EXT_blend_color				1
#define GL_EXT_framebuffer_object				1
#define GL_EXT_framebuffer_blit				1
#define GL_EXT_framebuffer_multisample				1
#define GL_EXT_packed_depth_stencil				1
#define GL_NV_fragment_program				1
#define GL_NV_float_buffer				1
#define GL_NV_texgen_reflection				1
#define GL_NV_texture_env_combine4				1
#define GL_NV_texture_rectangle				1
#define GL_NV_texture_shader				1
#define GL_NV_vertex_array_range				1
#define GL_NV_point_sprite				1
#define GL_NV_register_combiners				1
#define WGL_EXT_swap_control				1
#define GL_WIN_swap_hint				1
#define WGL_ARB_extensions_string				1
#define WGL_ARB_pixel_format				1
#define WGL_ARB_pbuffer				1
#define WGL_ARB_render_texture				1
#define WGL_NV_render_depth_texture				1
#define WGL_NV_render_texture_rectangle				1
#define WGL_ATI_pixel_format_float				1
#define WGL_EXT_swap_control_tear				1
#define GL_NV_texture_compression_vtc				1
#define GL_EXT_texture_compression_dxt1				1
#define GL_ARB_compressed_texture_pixel_storage				1


//	CPU code generation

#define RAPTOR_SMP_CODE_GENERATION				1
#define RAPTOR_SSE_CODE_GENERATION				1
#define RAPTOR_SSE2_CODE_GENERATION				1


#endif

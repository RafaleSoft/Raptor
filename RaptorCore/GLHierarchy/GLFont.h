// GLFont.h: interface for the CGLFont class.
//
//////////////////////////////////////////////////////////////////////
#if !defined(AFX_GLFONT_H__D451FE62_5FE1_11D3_9142_BA23BC92E77C__INCLUDED_)
#define AFX_GLFONT_H__D451FE62_5FE1_11D3_9142_BA23BC92E77C__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000


class FTFace;
class TTBitmapFont;
class TTOutlineFont;

#ifndef __CGLTYPES_HPP__
	#include "System/CGLTypes.h"
#endif

#if !defined(AFX_PERSISTENCE_H__5561BA28_831B_11D3_9142_EEB51CEBBDB0__INCLUDED_)
	#include "Persistence.h"
#endif


RAPTOR_NAMESPACE_BEGIN

class CGeometry;
class C3DSet;
class CTextureObject;


class RAPTOR_API CGLFont : public CPersistence
{
public:
	CGLFont(const std::string& name = "GLFont");
	virtual ~CGLFont();

	//!	Creates a 2D bitmap font model
	//! @param name : the filename of the font to open
	//!	@param size : the size of the glyphs generated
	//! @return true if the whole creation process succeeded, false otherwise
	bool create2D(const std::string &name, unsigned int size);

	//!	Creates a 3D font model
	//! @param name : the filename of the font to open
	//!	@param size : the size of the glyphs generated
	//!	@param faceTextured : the 3D geometry is generated wih texturing enabled for front faces
	//! @param sideTextured : same as above, but specific to extruded geometry generation.
	//! @return true if the whole creation process succeeded, false otherwise
	bool create3D(const std::string &name, unsigned int size,bool faceTextured = true,bool sideTextured=true);

	//! Creates a vector font model.
	//! @param name : the filename of the font to open. If empty, the SIMPLEX subset of Hershey font is used.
	//!	@param size : the size of the glyphs generated.
	//! @return true if the whole creation process succeeded, false otherwise
	bool createVector(const std::string &name, unsigned int size);

	//! Creates a texture font model. A 2D font is first generated by calling create2D
	//! @param name : the filename of the font to open. If empty, the SIMPLEX subset of Hershey font is used.
	//!	@param size : the size of the glyphs generated.
	//! @param antialias : turn on/off font antialiasing (alpha based for correct superposition with frame content)
	//! @return true if the whole creation process succeeded, false otherwise
	bool glCreateTexture(const std::string &name, unsigned int size,bool antialiased);


	//! Generates the display lists for 3D & Vector glyphs for a whole charset: glTTBuildGeometry is called
	//!	for each character of the charset with the following parameters:
	//! @param precision : controls the precision of font interpolation of the geometry.
	//! A low precision produces a large geometry that is closer of the ideal character:
	//!	it is a minimum pixel distance allowed between generated geometry and character.
	//! @param extrusion : controls the extrusion of each character 3D model
	//! @param scale : controls the global size of the generated 3D geometries.
	//! @return true is generation succeeded, false otherwise.
	//! Rq: a 3D font must be created with create3D, a vector font with createVector
	bool glGenGlyphs(float precision = 1.0f,
					 float extrusion = 0.0f,
					 float scale = 1.0f );

	//! Returns the glyphs settings used for generation in genGlyphs
	//! @param precision : returns precision
	//! @param extrusion : returns extrusion
	//! @param scale : returns scals
	//! @param glyphset : selects the generated charset for which parameters are queried.
	//! If the charset has not been generated, the parameters are left unchanged and returns false.
	//! @return true if the charset is found and then parameters are returned, false otherwise.
	//! Rq: a 3D font must be created with create3D.
	bool getGlyphSettings(	float &precision,
							float &extrusion,
							float &scale,
							unsigned int glyphset);

	//!	3D font writer: generates a display built with the glyphs generated by genGlyphs.
	//! @param text : the text to write
	//! @param glyphset : the index of a generated glyphset ( with genGlyphs )
	//! @param width : if non NULL, receive the width of the whole text
	//! @param height : if non NULL, receive the height of the whole text
	//! @return a handle to the display list for the text.
	//! Rq: a 3D font must be created with create3D.
	RAPTOR_HANDLE glWriteList(	const std::string &text, 
								unsigned int glyphset,
								float *width = NULL,
								float *height = NULL);

	//!	Same as above but writes text using glyphs without generating a new display list.
	void glWrite(	const std::string &text, unsigned int glyphset );

	//!	2D bitmap font writer: this method directly draws into the current buffer with bitmaps.
	//! @param text : the text to write
	//! @param x : the x horizontal position where writing starts
	//! @param y : the y vertical position where writing starts
	//! Rq: a 2D font must be created with create2D.
	void glWrite(	const std::string &text, int x, int y);

	//!	Computes a 3D font width for the specified text string
	//! @param s : the text for which width is queried
	//! @param numglyphset : the generated charset used ( with genGlyphs ) 
	//! @return the computed width.
	float getWidth( const std::string &s, unsigned int numglyphset) const;

	//!	Computes a 2D font width for the specified text string
	//! @param s : the text for which width is queried
	//! @return the computed width.
	float getWidth( const std::string &s) const;

	//!	Computes a 3D font height for the specified text string
	//! @param s : the text for which height is queried
	//! @param numglyphset : the generated charset used ( with genGlyphs ) 
	//! @return the computed height.
	float getHeight(const std::string &s, unsigned int numglyphset) const;

	//!	Computes a 2D font height for the specified text string
	//! @param s : the text for which height is queried
	//! @return the computed height.
	float getHeight(const std::string &s) const;


	//	Callbacks
	//	
	//!	this callback is called at every vertex generation
	//!	before issuing a glVertex command
	//!	override to perform custom transformations
	virtual void onVertex(float &,float &,float &) 
	{
	};
	//!	this callback is called at every vertex generation
	//!	before issuing a glTexCoord command
	//!	override to perform custom transformations
	virtual void onTexCoord(float &,float &) 
	{
	};


	//!	This method generates a geometry of the text string using this font if initialised by create3D
	//! @see genGlyphs for parameters.
	CGeometry* glBuildGeometry(	const std::string &str,
								float precision,
								float extrusion,
								float scale);

	//!	This method generates a set of geometries from the text string using this font if initialised by create3D.
	//! buildGeometry is used for each character of the string.
	C3DSet* glBuildSet(	const std::string& str,
						float precision,
						float extrusion,
						float scale);

	//!	Implements CPersistence
	DECLARE_CLASS_ID(CGLFontClassID,"Font",CPersistence)



private:
	CGLFont(const CGLFont&);

	//!	This method generates a display list independantly for a vector font.
	//!	It is called by genGlyphs sequentially for each char of the font.
	//! @see genGlyphs for parameters.
	RAPTOR_HANDLE glBuildVectors(	const std::string &str, 
									float precision,
									float scale = 1.0f,
									float *width = NULL,
									float *height = NULL);

	
	//!	This method generates a display list independently
	//!	This method is called by genGlyphs to generate
	//!	a display list for each char of the font and then reuse
	//!	them sequentially for all glWrite calls
	//! @see genGlyphs for parameters.
	RAPTOR_HANDLE glTTBuildGeometry(const std::string &str,
									float precision = 1.0f,
									float extrusion = 0.0f,
									float scale = 1.0f,
									float *width = NULL,
									float *height = NULL);

	friend class CGLLayer;
	friend class CSSE_GLLayer;

	bool			m_bTexturedFace;
	bool			m_bTexturedSide;
	bool			m_bVectorized;
	bool			m_bTextured;
	bool			m_bAntialiased;

	CTextureObject	*m_texture;
	FTFace			*m_face;
	TTOutlineFont	*m_font;
	TTBitmapFont	*m_bmfont;

	string			m_fontFileName;
	unsigned int	m_size;

	vector<void*>	m_glfontglyph;
	vector<void*>	m_glfontglyphsettings;
};

RAPTOR_NAMESPACE_END

#endif // !defined(AFX_GLFONT_H__D451FE62_5FE1_11D3_9142_BA23BC92E77C__INCLUDED_)


// GLFontFactory.h: interface for the CGLFontFactory class.
//
//////////////////////////////////////////////////////////////////////
#if !defined(AFX_GLFONTFACTORY_H__E18CD490_4CB0_4ECA_916D_85B155FF04C3__INCLUDED_)
#define AFX_GLFONTFACTORY_H__E18CD490_4CB0_4ECA_916D_85B155FF04C3__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000


RAPTOR_NAMESPACE_BEGIN

class CGL2DFont;
class CGL3DFont;
class CGLVectorFont;
class CGL2DTextureFont;

class RAPTOR_API CGLFontFactory
{
public:
	//!	Creates a 2D bitmap font model
	//! @param name : the filename of the font to open
	//!	@param size : the size of the glyphs generated
	//! @return CGL2DFont* if the whole creation process succeeded, NULL otherwise
	static CGL2DFont* create2DFont(const std::string& filename,
								   unsigned int size,
								   const std::string& name = "GL2DFont");

	//!	Creates a 3D font model
	//! @param name : the filename of the font to open
	//!	@param size : the size of the glyphs generated
	//!	@param faceTextured : the 3D geometry is generated wih texturing enabled for front faces
	//! @param sideTextured : same as above, but specific to extruded geometry generation.
	//! @return CGL3DFont* if the whole creation process succeeded, NULL otherwise
	static CGL3DFont* create3DFont(const std::string& filename,
								   unsigned int size,
								   bool faceTextured = true,
								   bool sideTextured = true,
								   const std::string& name = "GL3DFont");

	//! Creates a vector font model.
	//! @param name : the filename of the font to open. If empty, the SIMPLEX subset of Hershey font is used.
	//!	@param size : the size of the glyphs generated.
	//! @return CGLVectorFont* if the whole creation process succeeded, NULL otherwise
	static CGLVectorFont* createVectorFont(const std::string &filename,
										   unsigned int size,
										   const std::string& name = "GLVectorFont");

	//! Creates a texture font model. A 2D font is first generated by calling create2D
	//! @param name : the filename of the font to open. If empty, the SIMPLEX subset of Hershey font is used.
	//!	@param size : the size of the glyphs generated.
	//! @param antialias : turn on/off font antialiasing (alpha based for correct superposition with frame content)
	//! @return CGLTextureFont* if the whole creation process succeeded, NULL otherwise
	static CGL2DTextureFont* glCreateTextureFont(const std::string &filename,
												 unsigned int size,
												 bool antialiased,
												 const std::string& name = "GLTextureFont");

private:
	CGLFontFactory();
	~CGLFontFactory();
};

RAPTOR_NAMESPACE_END

#endif // !defined(AFX_GLFONTFACTORY_H__E18CD490_4CB0_4ECA_916D_85B155FF04C3__INCLUDED_)
###########################################################################
#                                                                         #
#  Makefile.raptortoolbox                                                 #
#                                                                         #
#    Raptor OpenGL & Vulkan realtime 3D Engine SDK.                       #
#                                                                         #
#  Copyright 1998-2019 by                                                 #
#  Fabrice FERRAND.                                                       #
#                                                                         #
#  This file is part of the Raptor project, and may only be used,         #
#  modified, and distributed under the terms of the Raptor project        #
#  license, LICENSE.  By continuing to use, modify, or distribute         #
#  this file you indicate that you have read the license and              #
#  understand and accept it fully.                                        #
#                                                                         #
###########################################################################


export

OUTPUT = $(RAPTOR_ROOT)/Build/Linux/Release/RaptorToolBox
CCCFLAGS =  -DSIMD_NO_ASSEMBLY -DLINUX -fPIC -std=c++11 -fopenmp -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 
SRCDIR = $(RAPTOR_ROOT)/RaptorToolBox
INCDIRS = -I$(SRCDIR) -I$(RAPTOR_ROOT)/Redist/Include -I$(VULKAN_INCLUDE_PATH) -I$(JPEGLIB_INCLUDE_PATH) -I$(TIFFLIB_INCLUDE_PATH) -I$(PNGLIB_INCLUDE_PATH)

# Remove MESA options before all GL extensions are included.
CCCFLAGS += -DGL_MESA_shader_object  -DGL_MESA_shader_debug
CCCFLAGS += -DMAX_PATH=PATH_MAX -DGLX_EXTENSIONS

LDFLAGS = -L$(RAPTOR_ROOT)/Redist/Lib -lraptorcore -Bdynamic -shared -lstdc++

SO = $(OUTPUT)/libRaptorToolBox.so.$(RAPTOR_VERSION)
LIB = $(OUTPUT)/libRaptorToolBox.a


SRC_BASE = \
	$(SRCDIR)/Controllers.cpp \
	$(SRCDIR)/Filters.cpp \
	$(SRCDIR)/Imaging.cpp \
	$(SRCDIR)/Loaders.cpp \
	$(SRCDIR)/Merge.cpp \
	$(SRCDIR)/Renders.cpp \
	$(SRCDIR)/BasicObjects.cpp

SRC_IMAGING = \
	$(SRCDIR)/Imaging/BMPImaging.cpp \
	$(SRCDIR)/Imaging/ICOImaging.cpp \
	$(SRCDIR)/Imaging/TGAImaging.cpp \
	$(SRCDIR)/Imaging/JPGImaging.cpp \
	$(SRCDIR)/Imaging/PNGImaging.cpp \
	$(SRCDIR)/Imaging/TIFFImaging.cpp

SRC_LOADERS = \
	$(SRCDIR)/Loaders/3DSfile.cpp \
	$(SRCDIR)/Loaders/OBJFile.cpp \
	$(SRCDIR)/Loaders/OBJScript_lex.cpp \
	$(SRCDIR)/Loaders/OBJScript_yacc.cpp \
	$(SRCDIR)/Loaders/OBJScript_tree.cpp

SRC_FILTERS = \
	$(SRCDIR)/Filters/BlurFilter.cpp \
	$(SRCDIR)/Filters/ColorControlFilter.cpp \
	$(SRCDIR)/Filters/DOFFilter.cpp \
	$(SRCDIR)/Filters/HDRFilter.cpp \
	$(SRCDIR)/Filters/MagnifierFilter.cpp \
	$(SRCDIR)/Filters/MBFilter.cpp

SRC_CONTROLLERS = \
	$(SRCDIR)/Controllers/ViewPointController.cpp

	
OBJ_BASE = $(SRC_BASE:$(SRCDIR)/%.cpp=$(OUTPUT)/%.o)
OBJ_IMAGING = $(SRC_IMAGING:$(SRCDIR)/Imaging%.cpp=$(OUTPUT)%.o)
OBJ_LOADERS = $(SRC_LOADERS:$(SRCDIR)/Loaders%.cpp=$(OUTPUT)%.o)
OBJ_FILTERS = $(SRC_FILTERS:$(SRCDIR)/Filters%.cpp=$(OUTPUT)%.o)
OBJ_CONTROLLERS = $(SRC_CONTROLLERS:$(SRCDIR)/Controllers%.cpp=$(OUTPUT)%.o)
ALL_OBJS = $(OBJ_BASE) $(OBJ_IMAGING) $(OBJ_FILTERS) $(OBJ_LOADERS) $(OBJ_CONTROLLERS)

	
all:    $(LIB) $(SO)

clean:
	rm -rf $(OUTPUT)
	mkdir -p $(OUTPUT)

$(LIB):  $(ALL_OBJS)
	ar -qcv $(LIB) $(ALL_OBJS)
	cp $(LIB) $(REDIST)/Lib

$(SO):  $(ALL_OBJS)
	g++ -o $(SO) $(LDFLAGS) $(ALL_OBJS)
	cp $(SO) $(REDIST)/Bin

$(OBJ_BASE): $(SRC_BASE)
	g++ $(CCCFLAGS) $(INCDIRS) -c $(<D)/$(*F).cpp  -o $(OUTPUT)/$(@F)

$(OBJ_FILTERS): $(SRC_FILTERS)
	g++ $(CCCFLAGS) $(INCDIRS) -c $(<D)/$(*F).cpp  -o $(OUTPUT)/$(@F)

$(OBJ_LOADERS): $(SRC_LOADERS)
	g++ $(CCCFLAGS) $(INCDIRS) -c $(<D)/$(*F).cpp  -o $(OUTPUT)/$(@F)

$(OBJ_IMAGING): $(SRC_IMAGING)
	g++ $(CCCFLAGS) $(INCDIRS) $(INCDIR_TIFF) -c $(<D)/$(*F).cpp  -o $(OUTPUT)/$(@F)

$(OBJ_CONTROLLERS): $(SRC_CONTROLLERS)
	g++ $(CCCFLAGS) $(INCDIRS) -c $(<D)/$(*F).cpp  -o $(OUTPUT)/$(@F)

$(SRC_LOADERS) : $(SRCDIR)/Loaders/OBJ.lex
	(cd $(SRCDIR)/Loaders && $(RAPTOR_ROOT)/Redist/Bin/Microlex -f OBJ.lex -o OBJScript -v)


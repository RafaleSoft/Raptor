/***************************************************************************/
/*                                                                         */
/*  phong.ps                                                               */
/*                                                                         */
/*    Raptor OpenGL & Vulkan realtime 3D Engine SDK.                       */
/*                                                                         */
/*  Copyright 1998-2019 by                                                 */
/*  Fabrice FERRAND.                                                       */
/*                                                                         */
/*  This file is part of the Raptor project, and may only be used,         */
/*  modified, and distributed under the terms of the Raptor project        */
/*  license, LICENSE.  By continuing to use, modify, or distribute         */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#version 120

const int MAX_LIGHTS = 3;
uniform	sampler2D diffuseMap;
uniform int lightEnable[gl_MaxLights];

varying vec3 normal;
varying	vec4 lightDirs[MAX_LIGHTS];
varying	vec3 eyeDir;


void main (void)
{
	vec3 n = normalize(normal);
	vec4 diffuse = gl_FrontLightModelProduct.sceneColor;
	vec4 specular = vec4(0.0,0.0,0.0,0.0);

	for (int i=0 ; i<MAX_LIGHTS ; i++)
	{
		int numl = lightEnable[i];
		if (numl >= 0)
		{
			float att = lightDirs[numl].w;
			diffuse += att * gl_FrontLightProduct[numl].ambient;
			float NdotL = max(dot(n,normalize(lightDirs[numl].xyz)),0.0);
			if (NdotL > 0.0)
			{
				diffuse += att * gl_FrontLightProduct[numl].diffuse * NdotL;

				vec3 r = reflect(-lightDirs[numl].xyz,n);
				float NdotHV = max(dot(normalize(r),normalize(eyeDir)),0.0);
				specular += att * pow(NdotHV,gl_FrontMaterial.shininess) * gl_FrontLightProduct[numl].specular;
			}	
		}
	}
	
    gl_FragColor = specular + diffuse * texture2D(diffuseMap,vec2(gl_TexCoord[0].st));
}

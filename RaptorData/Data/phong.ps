/***************************************************************************/
/*                                                                         */
/*  phong.ps                                                               */
/*                                                                         */
/*    Raptor OpenGL & Vulkan realtime 3D Engine SDK.                       */
/*                                                                         */
/*  Copyright 1998-2019 by                                                 */
/*  Fabrice FERRAND.                                                       */
/*                                                                         */
/*  This file is part of the Raptor project, and may only be used,         */
/*  modified, and distributed under the terms of the Raptor project        */
/*  license, LICENSE.  By continuing to use, modify, or distribute         */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#version 440 compatibility

//	Maximum number of lights due to number of interpolators available
const int MAX_LIGHTS = 5;
const int GL_MAX_LIGHTS = 8;

//
//	Raptor Uniform blocs
//
struct LightProduct
{
	vec4 position;
	vec4 attenuation;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shininess;
	float reserved[3];
	bool enable;
	bool reserved2[3];
};

layout (binding = 0) uniform LightProducts
{
	LightProduct lights[MAX_LIGHTS];
	vec4		 scene_ambient;
} R_LightProducts;


uniform	sampler2D diffuseMap;

in vec3 normal;
in vec4 lightDirs[MAX_LIGHTS];
in vec3 eyeDir;
in vec4 o_texCoord;

layout(location = 0) out vec4 o_Color;


void main (void)
{
	vec3 n = normalize(normal);
	vec4 diffuse = R_LightProducts.scene_ambient;
	vec4 specular = vec4(0.0,0.0,0.0,0.0);

	for (int i=0 ; i<MAX_LIGHTS ; i++)
	{
		if (R_LightProducts.lights[i].enable)
		{
			float att = lightDirs[i].w;
			diffuse += att * R_LightProducts.lights[i].ambient;

			float NdotL = max(dot(n,normalize(lightDirs[i].xyz)),0.0);
			if (NdotL > 0.0)
			{
				diffuse += att * R_LightProducts.lights[i].diffuse * NdotL;

				vec3 r = reflect(-lightDirs[i].xyz,n);
				float NdotHV = max(dot(normalize(r),normalize(eyeDir)),0.0);
				specular += att * pow(NdotHV,R_LightProducts.lights[i].shininess) * R_LightProducts.lights[i].specular;
			}	
		}
	}
	
    o_Color = specular + diffuse * texture2D(diffuseMap,vec2(o_texCoord.st));
}
